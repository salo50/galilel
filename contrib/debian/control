Source: galilel
Section: utils
Priority: optional
Maintainer: Maik Broemme <mbroemme@libmpq.org>
Uploaders: Maik Broemme <mbroemme@libmpq.org>
Build-Depends: debhelper,
 devscripts,
 automake,
 libtool,
 bash-completion,
 libdb4.8++-dev,
 libssl1.0-dev | libssl-dev,
 pkg-config,
 libevent-dev,
 libgmp-dev,
 libboost-system1.48-dev | libboost-system-dev (>> 1.47),
 libboost-filesystem1.48-dev | libboost-filesystem-dev (>> 1.47),
 libboost-program-options1.48-dev | libboost-program-options-dev (>> 1.47),
 libboost-thread1.48-dev | libboost-thread-dev (>> 1.47),
 libboost-test1.48-dev | libboost-test-dev (>> 1.47),
 libboost-chrono1.48-dev | libboost-chrono-dev (>> 1.47),
 libminiupnpc8-dev | libminiupnpc-dev,
 xvfb,
 qtbase5-dev, qttools5-dev-tools, qttools5-dev,
 libqrencode-dev,
 libprotobuf-dev, protobuf-compiler,
 libprotobuf-dev, protobuf-compiler,
 python,
 libzmq3-dev,
 dh-systemd
Standards-Version: 3.9.2
Homepage: https://galilel.org
Vcs-Git: git://github.com/Galilel-Project/galilel.git
Vcs-Browser: https://github.com/Galilel-Project/galilel

Package: galileld
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Galilel Coin (GALI) is an open-source Proof-of-Stake
 digital crypto currency for fast (using SwiftX), private (Zerocoin
 protocol) and secure microtransactions. Our main goal is to create
 a decentralized fully secure and anonymous network to run
 applications which do not rely on any central body control. By
 having a distributed system, thousands of users will be responsible
 for maintaining the application and data so that there is no single
 point of failure.
 .
 Full transaction history is stored locally at each client. This
 requires 2+ GB of space, slowly growing.
 .
 This package provides the daemon, galileld, and the CLI tool
 galilel-cli to interact with the daemon.

Package: galilel-qt
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Galilel Coin (GALI) is an open-source Proof-of-Stake
 digital crypto currency for fast (using SwiftX), private (Zerocoin
 protocol) and secure microtransactions. Our main goal is to create
 a decentralized fully secure and anonymous network to run
 applications which do not rely on any central body control. By
 having a distributed system, thousands of users will be responsible
 for maintaining the application and data so that there is no single
 point of failure.
 .
 Full transaction history is stored locally at each client.  This
 requires 2+ GB of space, slowly growing.
 .
 This package provides Galilel-Qt, a GUI for Galilel based on Qt.
